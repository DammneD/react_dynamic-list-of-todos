{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","title","select","handleChange","event","target","name","value","setState","this","query","toLowerCase","filtered","props","todos","filter","todo","includes","completed","className","action","type","placeholder","onChange","todosFilter","map","isActive","selectedUserId","userId","cn","htmlFor","id","checked","readOnly","onClick","getId","React","Component","API_TODOS_URL","API_USERS_URL","getTodos","a","fetch","response","ok","json","Error","getUser","CurrentUser","isUserLoaded","user","email","phone","loadUser","prevProps","clear","App","selectUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c9ca3682.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport cn from 'classnames';\nimport { Todo } from '../../types/type';\n\ninterface Props {\n  todos: Todo[];\n  getId: (id: number) => void;\n  selectedUserId: number;\n}\n\ninterface State {\n  title: string;\n  select: string;\n}\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    title: '',\n    select: 'all',\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = event.target;\n\n    this.setState({ [name]: value } as unknown as Pick<State, keyof State>);\n  };\n\n  todosFilter() {\n    const { title, select } = this.state;\n    const query = title.toLowerCase();\n\n    const filtered = this.props.todos.filter(todo => todo.title.toLowerCase().includes(query));\n\n    if (select === 'active') {\n      return filtered.filter(todo => !todo.completed);\n    }\n\n    if (select === 'completed') {\n      return filtered.filter(todo => todo.completed);\n    }\n\n    return filtered;\n  }\n\n  render() {\n    return (\n      <div className=\"TodoList\">\n\n        <h2>Todos: </h2>\n        <form\n          className=\"form\"\n          action=\"GET\"\n        >\n          <input\n            type=\"text\"\n            name=\"title\"\n            className=\"form__input\"\n            placeholder=\"Enter task title\"\n            value={this.state.title}\n            onChange={event => this.handleChange(event)}\n          />\n          <select\n            name=\"select\"\n            className=\"form__select\"\n            value={this.state.select}\n            onChange={event => this.handleChange(event)}\n          >\n            <option\n              value=\"all\"\n            >\n              All\n            </option>\n\n            <option\n              value=\"active\"\n            >\n              Active\n            </option>\n\n            <option\n              value=\"completed\"\n            >\n              Completed\n            </option>\n\n          </select>\n        </form>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {this.todosFilter().map((todo) => {\n              const isActive = this.props.selectedUserId === todo.userId;\n\n              return (\n                <li\n                  className={\n                    cn('TodoList__item', {\n                      'TodoList__item--checked': todo.completed,\n                      'TodoList__item--unchecked': !todo.completed,\n                    })\n                  }\n                >\n                  <label htmlFor=\"input\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"input\"\n                      checked={todo.completed}\n                      readOnly\n                    />\n                    <p>{todo.title}</p>\n                  </label>\n\n                  <button\n                    className={cn(\n                      'TodoList__user-button',\n                      'button',\n                      { 'TodoList__user-button--selected': isActive },\n                    )}\n                    type=\"button\"\n                    onClick={() => this.props.getId(todo.userId)}\n                  >\n                    {`User #${todo.userId}`}\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n\n      </div>\n    );\n  }\n}\n","import { Todo, User } from '../types/type';\n\n// eslint-disable-next-line\nconst API_TODOS_URL = `https://mate.academy/students-api/todos`;\n// eslint-disable-next-line\nconst API_USERS_URL = `https://mate.academy/students-api/users`;\n\nexport async function getTodos(): Promise<Todo[]> {\n  try {\n    const response = await fetch(API_TODOS_URL);\n\n    if (response.ok) {\n      return await response.json();\n    }\n\n    throw new Error('ERROR Todos');\n  } catch (error) {\n    throw new Error(`There is a problem: ${error}`);\n  }\n}\n\nexport async function getUser(id: number): Promise<User> {\n  try {\n    const response = await fetch(`${API_USERS_URL}/${id}`);\n\n    if (response.ok) {\n      return await response.json();\n    }\n\n    throw new Error('ERROR Users');\n  } catch (error) {\n    throw new Error(`There is a problem: ${error}`);\n  }\n}\n","import React from 'react';\nimport { getUser } from '../../api/api';\nimport { User } from '../../types/type';\nimport './CurrentUser.scss';\n\ninterface Props {\n  id: number;\n  clear: (id: number) => void;\n}\n\ninterface State {\n  user: User;\n  isUserLoaded: boolean,\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    isUserLoaded: true,\n    user: {\n      id: 0,\n      name: '',\n      email: null,\n      phone: null,\n    },\n  };\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.id !== this.props.id) {\n      this.loadUser();\n    }\n  }\n\n  async loadUser() {\n    try {\n      const user = await getUser(this.props.id);\n\n      this.setState({ user, isUserLoaded: true });\n    } catch (error) {\n      this.setState({ isUserLoaded: false });\n      throw new Error(`User isn't loaded ${error}`);\n    }\n  }\n\n  render() {\n    return (\n      <>\n        {this.state.isUserLoaded\n          ? (\n            <div className=\"CurrentUser\">\n              <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${this.state.user.id}`}</span></h2>\n\n              <h3 className=\"CurrentUser__name\">{this.state.user.name}</h3>\n              <p className=\"CurrentUser__email\">{this.state.user.email}</p>\n              <p className=\"CurrentUser__phone\">{this.state.user.phone}</p>\n              <button\n                type=\"button\"\n                className=\"button CurrentUser__button\"\n                onClick={() => this.props.clear(0)}\n              >\n                Clear\n              </button>\n            </div>\n          )\n          : <h2>There is no such user :(</h2>}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\nimport { Todo } from './types/type';\n\ninterface State {\n  todos: Todo[];\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  selectUser = (selectedUserId: number) => {\n    this.setState({ selectedUserId });\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={this.state.todos}\n            getId={this.selectUser}\n            selectedUserId={this.state.selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                id={this.state.selectedUserId}\n                clear={this.selectUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}